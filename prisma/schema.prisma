generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?
  password      String?
  phone         String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  profession    String?
  bgImage       String?
  summary       String?
  gender        String?
  country       String?
  college       String?
  city          String?

  orders         Order[]
  blogs          Blog[]           @relation("BlogCreator")
  events         Event[]          @relation("EventCreator")
  registration   Registration[]
  accounts       Account[]
  sessions       Session[]
  educations     Education[]
  experiences    Experience[]
  skills         Skills?
  portfolios     Portfolio?
  projects       Projects[]
  certifications Certifications[]

  campusAmbassador CampusAmbassador?

  admin         Admin         @default(User)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  campusLeaders CampusLeader?
}

enum Admin {
  Superadmin
  Admin
  User
}

model Education {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  college_schoolName String
  degree             String?
  fieldOfstudy       String?
  StartDate          DateTime
  EndDate            DateTime
  grade              Float?
}

model Experience {
  id               String    @id @default(cuid())
  userId           String
  user             User      @relation(fields: [userId], references: [id])
  Jobtitle         String
  company          String
  location         String
  StartDate        DateTime
  EndDate          DateTime?
  currentlyWorking Boolean
  EmploymentType   String
}

model Skills {
  userId          String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  technicalSkills String[]
  softSkills      String[]
  AreasOfInterest String[]
}

model Portfolio {
  userId      String  @id @default(cuid())
  user        User    @relation(fields: [userId], references: [id])
  WebsiteUrl  String?
  LinkedInUrl String?
  GithubUrl   String?
}

model Projects {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  ProjectName      String
  ProjectLink      String
  SummaryOfProject String
  SkillsUsed       String[]
}

model Certifications {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  CertificateName String
  IssuedBy        String
  IssueDate       DateTime
  CredentialId    String
  CredentialUrl   String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id          String   @id @default(uuid())
  title       String
  date        DateTime
  startTime   String?
  endTime     String?
  meeturl     String?
  venue       String?
  description String
  imageUrl    String
  location    String
  slug        String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  price       Float?

  creatorId String
  creator   User   @relation(name: "EventCreator", fields: [creatorId], references: [id])

  Order        Order[]
  registration Registration[]

  @@index([id], name: "id_index")
  @@index([creatorId], name: "creatorId_index")
  @@index([title], name: "search_index")
}

model Registration {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  event            Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId          String
  registrationDate DateTime @default(now())
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  creatorId String
  creator   User   @relation(name: "BlogCreator", fields: [creatorId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  eventId   String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([id], name: "id_index")
  @@index([userId], name: "userId_index")
  @@index([amount], name: "amount_index")
}

model CampusAmbassador {
  id              String @id @default(uuid())
  WhyCampusAmbassador        String
  TechnicalSkills    String
  StudentOrganizations     String
  WeekHoursForAmbassador String
  SixMonthCommitment  String
  HearAboutSoarx       String
  AdditionalInfo       String?
  EventOrganization   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model CampusLeader {
  id                        String   @id @default(uuid())
  WhyCapterLeader           String
  LeaderShipExperience      String
  StudentOrganizations      String
  StrategyForSoarx          String
  CoreTeamSoarx             String
  QualitiesForTeam          String
  WeekHoursForChapterLeader String
  OneYearCommitment         String
  HearAboutSoarx            String
  AdditionalInfo            String?
  userId                    String   @unique
  user                      User     @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
}

model Job {
  id                    String   @id @default(cuid())
  title                 String
  description           String?
  location              String
  aboutCompany          String?
  companyName           String
  applyLink             String
  salary                String
  experience            String
  lastDateToApply       String?
  section               String?
  slug                  String
  skills                String
  jobRole               String?      // Full Time, Part Time, Internship
  qualificationRequired String
  imageUrl              String?
  updatedAt             DateTime @updatedAt
  creatorId             String
  createdAt             DateTime @default(now())
}
